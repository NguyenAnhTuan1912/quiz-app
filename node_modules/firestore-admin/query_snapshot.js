class QuerySnapshot {
  /**
   * @param {object} snapshot A reference to the QuerySnapshot. 
   */
  constructor(snapshot) {
    this.snapshot_ = snapshot;
  }

  /**
   * @returns {Array<object>} Returns an array of all changes (as DocumentChange objects) in this QuerySnapshot.
   */
  DocChanges() {
    return this.snapshot_.docChanges();
  }

  /**
   * @returns {Array<object>} Returns an array of all the DocumentSnapshot objects in this QuerySnapshot.
   */
  Docs() {
    return this.snapshot_.docs;
  }

  /**
   * @returns {boolean} Returns true if there are no documents in the QuerySnapshot.
   */
  Empty() {
    return this.snapshot_.empty;
  }

  /**
   * @returns {object} Returns the query (as Query object) on which you called get or onSnapshot in order to get this QuerySnapshot.
   */
  Query() {
    return this.snapshot_.query;
  }

  /**
   * @returns {string} Returns the time this query snapshot was obtained.
   */
  ReadTime() {
    return this.snapshot_.readTime;
  }

  /**
   * @returns {number} The number of documents in the QuerySnapshot.
   */
  Size() {
    return this.snapshot_.size;
  }

  /**
   * @param {function} callback
   * @param {any} thisArg (Optional) The this binding for the callback.
   * @returns {number} The number of documents in the QuerySnapshot.
   */
  ForEach(callback, thisArg) {
    if (!thisArg)
      this.snapshot_.forEach(callback);
    else
      this.snapshot_.forEach(documentSnapshot => callback, thisArg);
  }
}

//----------------------------
// EXPORTS

exports.QuerySnapshot = QuerySnapshot;