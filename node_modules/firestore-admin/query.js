class Query {
  /**
   * @param {object} collection A reference to the CollectionReference. 
   */
  constructor(collection) {
    this.collection_ = collection;
    this.query_ = null;
  }

  /**
   * @returns {object} Returns a reference to the Query object. Returns null if no query operations have been performed on the collection.
   */
  Ref() {
    return this.query_;
  }

  /**
   * The Firestore instance for the Firestore database (useful for performing transactions, etc).
   * @returns {object} Returns an object.
   */
  Firestore() {
    return this.query_ ? this.query_.firestore : this.collection_.firestore;
  }

  /**
   * Creates a new Query that ends at the provided set of field values relative to the order of the query.
   * The order of the provided values must match the order of the order by clauses of the query.
   * @param {string} fieldValues The set of field values to end the query at. Value may be repeated.
   */
  EndAt(fieldValues) {
    this.query_ = this.query_.endAt(fieldValues); // FIX ???
  }

  /**
   * Creates and returns a new Query that ends before the set of field values relative to the order of the query. 
   * The order of the provided values must match the order of the order by clauses of the query.
   * @param {string} fieldValues The set of field values to end the query at. Value may be repeated.
   */
  EndBefore(fieldValues) {
    this.query_ = this.query_.endBefore(fieldValues); // FIX ???
  }

  /**
   * Get this query's snapshot. Executes the query and returns the results as a QuerySnapshot.
   * @returns {Promise<object>} Returns a Promise that resolves if successful and returns with the results of the Query.
   */
  GetSnapshot() {
    return new Promise((resolve, reject) => {
      this.query_.get().then(snapshot => {
        resolve(snapshot);
      }).catch(error => reject(`Failed to get query snapshot: ${error}.`));
    });
  }

  /**
   * Creates and returns a new Query that's additionally limited to only return up to the specified number of documents. 
   * This function returns a new (immutable) instance of the Query (rather than modify the existing instance) to impose the limit.
   * @param {string} n The maximum number of items to return.
   */
  Limit(n) {
    this.query_ = this.query_.limit(n);
  }

  /**
   * Specifies the offset of the returned results. 
   * This function returns a new (immutable) instance of the Query (rather than modify the existing instance) to impose the offset.
   * @param {string} n The offset to apply to the Query results.
   */
  Offset(n) {
    this.query_ = this.query_.offset(n);
  }

  /**
   * Attaches a listener for QuerySnapshot events.
   * @param {object} querySnapshotCallback A callback to be called every time a new QuerySnapshot is available.
   * @param {object} errorCallback (Optional) A callback to be called if the listen fails or is cancelled. No further callbacks will occur. If unset, errors will be logged to the console.
   * @returns {function} Returns an unsubscribe function that can be called to cancel the snapshot listener.
   */
  OnSnapshot(
    querySnapshotCallback, errorCallback) {
    if (!errorCallback)
      return this.doc_.onSnapshot(querySnapshotCallback);

    return this.doc_.onSnapshot(documentSnapshotCallback, errorCallback);
  }

  /**
   * Creates and returns a new Query that's additionally sorted by the specified field, optionally in descending order instead of ascending. 
   * This function returns a new (immutable) instance of the Query (rather than modify the existing instance) to impose the field mask.
   * @param {string} fieldPath The field to sort by.
   * @param {string} directionString (Optional) Direction to sort by ('asc' or 'desc'). If not specified, order will be ascending.
   */
  OrderBy(fieldPath, directionStr) {
    this.query_ = directionStr ? this.query_.orderBy(fieldPath, directionStr) : this.query_.orderBy(fieldPath);
  }

  /**
   * Creates and returns a new Query instance that applies a field mask to the result and returns only the specified subset of fields. 
   * You can specify a list of field paths to return, or use an empty list to only return the references of matching documents. 
   * This function returns a new (immutable) instance of the Query (rather than modify the existing instance) to impose the field mask.
   * @param {string} fieldPaths The field paths to return. Value may be repeated.
   */
  Select(fieldPaths) {
    this.query_ = this.query_.select(fieldPaths); // FIX ??? Pass in array to function...
  }

  /**
   * Creates and returns a new Query that starts after the provided set of field values relative to the order of the query. 
   * The order of the provided values must match the order of the order by clauses of the query.
   * @param {string} fieldValues The set of field values to start the query after. Value may be repeated.
   */
  StartAfter(fieldValues) {
    this.query_ = this.query_.startAfter(fieldValues); // FIX ??? Pass in array to function...
  }

  /**
   * Creates and returns a new Query that starts at the provided set of field values relative to the order of the query. 
   * The order of the provided values must match the order of the order by clauses of the query.
   * @param {string} fieldValues The set of field values to start the query at. Value may be repeated.
   */
  StartAt(fieldValues) {
    this.query_ = this.query_.startAfter(fieldValues); // FIX ??? Pass in array to function...
  }

  /**
   * Executes the query and streams the results as DocumentSnapshots.
   * @returns {object} Returns a Stream containing DocumentSnapshot.
   */
  Stream() {
    return this.query_.stream();
  }

  /**
   * Executes the query and streams the results as DocumentSnapshots.
   * @param {function} dataCallback Callback function for when data stream starts. Must take document snapshot as argument.
   * @param {function} endCallback Callback function for when data tream ends.
   * @returns {object} Returns a Stream containing DocumentSnapshot.
   */
  StreamActions(dataCallback, endCallback) {
    this.query_.on('data', dataCallback).on('end', endCallback);
  }

  /**
   * Creates and returns a new Query with the additional filter that documents must contain the specified field and the value should satisfy the relation constraint provided. 
   * Returns a new Query that constrains the value of a Document property. 
   * This function returns a new (immutable) instance of the Query (rather than modify the existing instance) to impose the filter.
   * @param {string|FieldPath} fieldPath The name of a property value to compare.
   * @param {string} opStr A comparison operation in the form of a string (e.g., "<").
   * @param {any} value The value to which to compare the field for inclusion in a query.
   */
  Where(fieldPath, opStr, value) {
    this.query_.where(fieldPath, opStr, value);
  }
}

//------------------------
// EXPORTS

exports.Query = Query;